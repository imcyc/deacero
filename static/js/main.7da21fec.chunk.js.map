{"version":3,"sources":["images/logo.svg","images/logo-imcyc.svg","componentes/Inicio.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Inicio","className","id","src","logo","alt","type","name","placeholder","value","to","logoimcyc","style","width","App","basename","process","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sFAAAA,EAAOC,QAAU,IAA0B,kC,mBCA3CD,EAAOC,QAAU,IAA0B,wC,6OC+B5BC,G,MAxBA,WACb,OACE,yBAAKC,UAAU,sBACb,yBAAKC,GAAG,eACN,yBAAKD,UAAU,gBACb,yBAAKE,IAAKC,IAAMF,GAAG,OAAOD,UAAU,OAAOI,IAAI,cAC/C,0DAEF,8BACE,2BAAOC,KAAK,OAAOJ,GAAG,QAAQD,UAAU,gBAAgBM,KAAK,QAAQC,YAAY,YACjF,2BAAOF,KAAK,OAAOJ,GAAG,WAAWD,UAAU,eAAeM,KAAK,QAAQC,YAAY,kBACnF,2BAAOF,KAAK,SAASL,UAAU,gBAAgBQ,MAAM,cAEvD,yBAAKP,GAAG,cACN,kBAAC,IAAD,CAAMD,UAAU,iBAAiBS,GAAG,KAClC,yBAAKP,IAAKQ,IAAWT,GAAG,OAAOD,UAAU,YAAYI,IAAI,YAAYO,MAAO,CAACC,MAAO,YAEtF,uBAAGZ,UAAU,SAAb,2D,MCLKa,MAdf,WACE,OACE,kBAAC,IAAD,CAAYC,SAAS,KACrB,kBAAC,IAAD,CAAQA,SAAUC,YAChB,yBAAKf,UAAU,OACb,4BAAQA,UAAU,cAChB,kBAAC,IAAD,CAAOgB,OAAK,EAACC,KAAK,IAAIC,UAAWnB,SCCvBoB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.7da21fec.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.0653a8a8.svg\";","module.exports = __webpack_public_path__ + \"static/media/logo-imcyc.15ca9bfd.svg\";","import React from 'react';\nimport { Link } from \"react-router-dom\";\nimport logo from '../images/logo.svg';\nimport logoimcyc from '../images/logo-imcyc.svg';\n\nimport './Inicio.css';\n\nconst Inicio = () => {\n  return (\n    <div className=\"wrapper fadeInDown\">\n      <div id=\"formContent\">\n        <div className=\"fadeIn first\">\n          <img src={logo} id=\"icon\" className=\"logo\" alt=\"User Icon\" />\n          <p>APP DE LOSAS PARA VIVIENDA</p>\n        </div>\n        <form>\n          <input type=\"text\" id=\"login\" className=\"fadeIn second\" name=\"login\" placeholder=\"USUARIO\"/>\n          <input type=\"text\" id=\"password\" className=\"fadeIn third\" name=\"login\" placeholder=\"CONTRASEÃ‘A\"/>\n          <input type=\"submit\" className=\"fadeIn fourth\" value=\"Ingresar\"/>\n        </form>\n        <div id=\"formFooter\">\n          <Link className=\"underlineHover\" to=\"/\">\n            <img src={logoimcyc} id=\"icon\" className=\"logoimcyc\" alt=\"User Icon\" style={{width: '300px'}} />\n          </Link>\n          <p className=\"small\">Instituto Mexicano del Cemento y del Concreto A.C.</p>\n        </div>\n      </div>\n    </div>\n  );\n}\n \nexport default Inicio;","import React from 'react';\nimport { HashRouter, BrowserRouter as Router, Route } from \"react-router-dom\";\nimport Inicio from './componentes/Inicio';\nimport './App.css';\n\nfunction App() {\n  return (\n    <HashRouter basename='/'>\n    <Router basename={process.env.PUBLIC_URL}>\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <Route exact path=\"/\" component={Inicio} />\n        </header>\n      </div>\n    </Router>\n    </HashRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}